CPP CODE -->

class DisjointSet{
    public: 
    vector<int> size, parent;
    
    DisjointSet(int s){
        size.resize(s+1, 1);
        parent.resize(s+1);
        for(int i = 0; i<=s; i++){
            parent[i] = i;
        }
    }
    
    int findUPar(int node){
        if(parent[node] == node)return node;
        
        return parent[node] = findUPar(parent[node]);
    }  
    
    void unionBySize(int u, int v){
        int Uparu = findUPar(u);
        int Uparv = findUPar(v);
        
        if(Uparu == Uparv)return;
        
        if(size[u]<size[v]){
            parent[Uparu] = Uparv;
            size[Uparv] += size[Uparu];
        }
        else{
            parent[Uparv] = Uparu;
            size[Uparu] += size[Uparv];
        }
    }
    
    
};

KOTLIN CODE -->

class DisjointSet(s: Int) {
    val size = MutableList(s + 1) { 1 }
    val parent = MutableList(s + 1) { it }

    fun findUPar(node: Int): Int {
        if (parent[node] == node) return node
        parent[node] = findUPar(parent[node])
        return parent[node]
    }

    fun unionBySize(u: Int, v: Int) {
        val Uparu = findUPar(u)
        val Uparv = findUPar(v)

        if (Uparu == Uparv) return

        if (size[Uparu] < size[Uparv]) {
            parent[Uparu] = Uparv
            size[Uparv] += size[Uparu]
        } else {
            parent[Uparv] = Uparu
            size[Uparu] += size[Uparv]
        }
    }
}

ENHANCED DISJOINT SET(IN KOTLIN) -->

class DisjointSet(s: Int) {
    val size = MutableList(s + 1) { 1 }
    val parent = MutableList(s + 1) { it }
    val edge = MutableList(s + 1) { 0 }

    fun findUPar(node: Int): Int {
        if (parent[node] == node) return node
        parent[node] = findUPar(parent[node])
        return parent[node]
    }

    fun getEdges(node: Int): Int {
        return edge[findUPar(node)]
    }

    fun getSizes(node: Int): Int {
        return size[findUPar(node)]
    }

    fun unionBySize(u: Int, v: Int) {
        val Uparu = findUPar(u)
        val Uparv = findUPar(v)

        if (Uparu == Uparv) {
            edge[Uparu]++  // If they're already connected, increment the edge count
            return
        }

        if (size[Uparu] < size[Uparv]) {
            parent[Uparu] = Uparv
            size[Uparv] += size[Uparu]
            edge[Uparv] += edge[Uparu] + 1  // Update edge count when merging
        } else {
            parent[Uparv] = Uparu
            size[Uparu] += size[Uparv]
            edge[Uparu] += edge[Uparv] + 1
        }
    }
}

