#include <iostream>
using namespace std;

class Node
{
public:
    int data;
    int height;
    Node *left, *right;

    Node(int val)
    {
        data = val;
        height = 1;
        left = right = NULL;
    }
};
class Avl
{
public:
    int getHeight(Node *root)
    {
        if (!root)
            return 0;

        return root->height;
    }

    int getBalance(Node *root)
    {
        return getHeight(root->left) - getHeight(root->right);
    }

    //  rightRotation(root);
    Node *rightRotation(Node *root)
    {
        Node *child = root->left;
        Node *childRight = child->right;

        child->right = root;
        root->left = childRight;

        // update the height
        root->height = 1 + max(getHeight(root->left), getHeight(root->right));
        child->height = 1 + max(getHeight(child->left), getHeight(child->right));

        return child;
    }

    //  leftRotation(root);
    Node *leftRotation(Node *root)
    {
        Node *child = root->right;
        Node *childleft = child->left;

        child->left = root;
        root->right = childleft;

        // update the height
        root->height = 1 + max(getHeight(root->left), getHeight(root->right));
        child->height = 1 + max(getHeight(child->left), getHeight(child->right));

        return child;
    }

    // leftRotation(root->left);

    Node *insertNode(Node *root, int key)
    {
       
        if (!root)
            return new Node(key); // Create a new node if root is NULL.

        // Exists
        if (key < root->data) // left side
        {
            root->left = insertNode(root->left, key);
        }
        else if (key > root->data)
        {
            root->right = insertNode(root->right, key);
        }
        else
        {
            return root; // dublicate lelement didi'nt allow
        }

        root->height = 1 + max(getHeight(root->left), getHeight(root->right));

        //  balancing chek
        int balance = getBalance(root);

        // left left case
        if (balance > 1 && key < root->left->data)
            return rightRotation(root);
        // right right caase
        else if (balance < -1 && root->right->data < key)
            return leftRotation(root);
        // left right case
        else if (balance > 1 && key > root->left->data)
        {
            root->left = leftRotation(root->left);
            return rightRotation(root);
        }

        // right left case
        else if (balance < -1 && root->left->data > key)
        {
            root->right = rightRotation(root->right);
            return leftRotation(root);
        }
        // no unbalancing
        else
        {
            return root;
        }
    }

    Node *deleteNode(Node *root, int key)
    {
        if (!root)
            return NULL;

        if (key < root->data)
        {
            root->left = deleteNode(root->left, key);
        }
        else if (key > root->data)
        {
            root->right = deleteNode(root->right, key);
        }
        else
        {
            // Leaf Node
            if (!root->left && !root->right)
            {
                delete root;
                return NULL;
            }
            // lonly one child exist
            else if (root->left && !root->right)
            {
                Node *temp = root->left;
                delete root;
                return temp;
            }
            else if (!root->left && root->right)
            {
                Node *temp = root->right;
                delete root;
                return temp;
            }
            // both child exist
            else
            {
                // right side smallest element
                Node *curr = root->right;
                while (curr->left)
                {
                    curr = curr->left;
                }
                root->data = curr->data;
                root->right = deleteNode(root->right, root->data);
            }
        }

        // update tthe height
        root->height = 1 + max(getHeight(root->left), getHeight(root->right));

        // check the balancing
        int balance = getBalance(root);
        // left side
        if (balance > 1)
        {
            // ll
            if (getBalance(root->left) >= 0)
                return rightRotation(root);
            // Lr
            else
            {
                root->left = leftRotation(root->left);
                return rightRotation(root);
            }
        }

        // right side
        else if (balance < -1)
        {
            // rr
            if (getBalance(root->right) <= 0)
                return leftRotation(root);
            // rl
            else
            {
                root->right = rightRotation(root->right);
                return leftRotation(root);
            }
        }
        else
            return root;
    }
    bool searchNode(Node *root, int key)
    {
        // Base case: If root is null or the key is found
        if (!root)
            return false;
        if (root->data == key)
            return true;

        // Recur down the tree
        if (key < root->data)
            return searchNode(root->left, key); // Search in the left subtree
        else
            return searchNode(root->right, key); // Search in the right subtree
    }
};
int main(){
    Avl avl;
    Node* root = NULL;
    for(int i = 1; i<=10; i++){
        root = avl.insertNode(root, i);//update the root otherwise you will be passing same root with NULL value
    }
    cout<<avl.searchNode(root, 9)<<endl;
    root = avl.deleteNode(root, 9);
    cout<<avl.searchNode(root, 9);
}
